<?php

namespace App\Filament\Resources;

use App\Filament\Resources\RentalServiceResource\Pages;
use App\Models\RentalService;
use Filament\Forms;
use Filament\Forms\Components\Section;
use Filament\Forms\Components\Grid;
use Filament\Forms\Components\Fieldset;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Components\RichEditor;
use Filament\Forms\Components\Toggle;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\Card;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Columns\IconColumn;
use Filament\Tables\Columns\BadgeColumn;
use Filament\Tables\Filters\Filter;
use Filament\Tables\Filters\TernaryFilter;
use Filament\Tables\Filters\TrashedFilter;
use Filament\Tables\Filters\SelectFilter;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use Illuminate\Support\Str;

class RentalServiceResource extends Resource
{
    protected static ?string $model = RentalService::class;

    protected static ?string $navigationIcon = 'heroicon-o-building-office-2';

    protected static ?string $navigationLabel = 'D·ªãch V·ª• Cho Thu√™';

    protected static ?string $pluralLabel = 'Danh S√°ch D·ªãch V·ª• Cho Thu√™';

    protected static ?string $modelLabel = 'D·ªãch V·ª• Cho Thu√™';

    protected static ?string $navigationGroup = 'Qu·∫£n L√Ω D·ªãch V·ª•';

    protected static ?int $navigationSort = 1;

    protected static ?string $recordTitleAttribute = 'name';

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Section::make('üìã Th√¥ng Tin D·ªãch V·ª•')
                    ->description('Cung c·∫•p th√¥ng tin chi ti·∫øt v·ªÅ d·ªãch v·ª• cho thu√™ c·ªßa b·∫°n')
                    ->icon('heroicon-o-information-circle')
                    ->collapsible()
                    ->compact()
                    ->schema([
                        Grid::make(12)
                            ->schema([
                                // Ph·∫ßn th√¥ng tin c∆° b·∫£n
                                Fieldset::make('Th√¥ng Tin C∆° B·∫£n')
                                    ->schema([
                                        TextInput::make('name')
                                            ->label('T√™n D·ªãch V·ª•')
                                            ->placeholder('Nh·∫≠p t√™n d·ªãch v·ª• (VD: Thu√™ Xe Du L·ªãch 16 Ch·ªó VIP)')
                                            ->required()
                                            ->maxLength(255)
                                            ->live(onBlur: true)
                                            ->afterStateUpdated(function (string $context, $state, callable $set) {
                                                if ($context === 'create') {
                                                    $set('slug', Str::slug($state));
                                                }
                                            })
                                            ->prefixIcon('heroicon-o-tag')
                                            ->prefixIconColor('primary')
                                            ->helperText('T√™n d·ªãch v·ª• n√™n ng·∫Øn g·ªçn, r√µ r√†ng v√† h·∫•p d·∫´n kh√°ch h√†ng')
                                            ->columnSpan(12),

                                        Textarea::make('short_description')
                                            ->label('M√¥ T·∫£ Ng·∫Øn')
                                            ->placeholder('Vi·∫øt m√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ d·ªãch v·ª• trong 1-2 c√¢u ƒë·ªÉ thu h√∫t kh√°ch h√†ng...')
                                            ->rows(3)
                                            ->maxLength(500)
                                            ->live()
                                            ->afterStateUpdated(function ($state, callable $set) {
                                                $set('short_description_count', strlen($state ?? ''));
                                            })
                                            ->helperText(function ($get) {
                                                $count = strlen($get('short_description') ?? '');
                                                return "ƒê√£ nh·∫≠p: {$count}/500 k√Ω t·ª±. M√¥ t·∫£ ng·∫Øn s·∫Ω hi·ªÉn th·ªã trong danh s√°ch d·ªãch v·ª•.";
                                            })
                                            ->columnSpan(12),
                                    ])
                                    ->columnSpan(12),
                            ]),
                    ]),

                Section::make('üìù N·ªôi Dung Chi Ti·∫øt')
                    ->description('Th√¥ng tin chi ti·∫øt v√† ƒëi·ªÅu ki·ªán s·ª≠ d·ª•ng d·ªãch v·ª•')
                    ->icon('heroicon-o-document-text')
                    ->collapsible()
                    ->compact()
                    ->schema([
                        Grid::make(1)
                            ->schema([
                                RichEditor::make('long_description')
                                    ->label('M√¥ T·∫£ Chi Ti·∫øt')
                                    ->placeholder('Vi·∫øt m√¥ t·∫£ chi ti·∫øt v·ªÅ d·ªãch v·ª•, bao g·ªìm:
‚Ä¢ ƒê·∫∑c ƒëi·ªÉm n·ªïi b·∫≠t c·ªßa d·ªãch v·ª•
‚Ä¢ Quy·ªÅn l·ª£i kh√°ch h√†ng nh·∫≠n ƒë∆∞·ª£c
‚Ä¢ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
‚Ä¢ Th√¥ng tin li√™n h·ªá v√† h·ªó tr·ª£')
                                    ->toolbarButtons([
                                        'attachFiles',
                                        'blockquote',
                                        'bold',
                                        'bulletList',
                                        'codeBlock',
                                        'h2',
                                        'h3',
                                        'italic',
                                        'link',
                                        'orderedList',
                                        'redo',
                                        'strike',
                                        'underline',
                                        'undo',
                                    ])
                                    ->fileAttachmentsDisk('public')
                                    ->fileAttachmentsDirectory('rental-services')
                                    ->helperText('S·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng vƒÉn b·∫£n ƒë·ªÉ l√†m n·ªïi b·∫≠t th√¥ng tin quan tr·ªçng. C√≥ th·ªÉ ƒë√≠nh k√®m h√¨nh ·∫£nh minh h·ªça.')
                                    ->columnSpanFull(),

                                Textarea::make('conditions')
                                    ->label('ƒêi·ªÅu Ki·ªán & Y√™u C·∫ßu')
                                    ->placeholder('Li·ªát k√™ c√°c ƒëi·ªÅu ki·ªán v√† y√™u c·∫ßu c·ª• th·ªÉ:
‚Ä¢ ƒêi·ªÅu ki·ªán ƒë·∫∑t c·ªçc (VD: 30% gi√° tr·ªã d·ªãch v·ª•)
‚Ä¢ Y√™u c·∫ßu v·ªÅ gi·∫•y t·ªù t√πy th√¢n
‚Ä¢ Th·ªùi gian h·ªßy d·ªãch v·ª•
‚Ä¢ Ch√≠nh s√°ch ho√†n ti·ªÅn
‚Ä¢ C√°c l∆∞u √Ω ƒë·∫∑c bi·ªát kh√°c')
                                    ->rows(6)
                                    ->maxLength(2000)
                                    ->helperText('Quy ƒë·ªãnh r√µ r√†ng gi√∫p tr√°nh hi·ªÉu l·∫ßm v√† tranh ch·∫•p v·ªõi kh√°ch h√†ng')
                                    ->columnSpanFull(),
                            ]),
                    ]),

                Section::make('‚öôÔ∏è C·∫•u H√¨nh D·ªãch V·ª•')
                    ->description('Thi·∫øt l·∫≠p tr·∫°ng th√°i v√† quy·ªÅn h·∫°n cho d·ªãch v·ª•')
                    ->icon('heroicon-o-cog-6-tooth')
                    ->collapsible()
                    ->compact()
                    ->schema([
                        Grid::make(2)
                            ->schema([
                                Fieldset::make('Tr·∫°ng Th√°i Ho·∫°t ƒê·ªông')
                                    ->schema([
                                        Toggle::make('is_active')
                                            ->label('K√≠ch Ho·∫°t D·ªãch V·ª•')
                                            ->helperText('B·∫≠t ƒë·ªÉ hi·ªÉn th·ªã d·ªãch v·ª• tr√™n website v√† cho ph√©p kh√°ch h√†ng ƒë·∫∑t d·ªãch v·ª•')
                                            ->default(true)
                                            ->onIcon('heroicon-m-eye')
                                            ->offIcon('heroicon-m-eye-slash')
                                            ->onColor('success')
                                            ->offColor('danger')
                                            ->inline(false)
                                            ->live()
                                            ->afterStateUpdated(function ($state, callable $set) {
                                                if (!$state) {
                                                    $set('status_note', 'D·ªãch v·ª• s·∫Ω b·ªã ·∫©n kh·ªèi danh s√°ch c√¥ng khai');
                                                } else {
                                                    $set('status_note', 'D·ªãch v·ª• s·∫Ω hi·ªÉn th·ªã c√¥ng khai cho kh√°ch h√†ng');
                                                }
                                            }),

                                        Forms\Components\Placeholder::make('status_note')
                                            ->label('')
                                            ->content(function (callable $get) {
                                                return $get('is_active')
                                                    ? '‚úÖ D·ªãch v·ª• s·∫Ω hi·ªÉn th·ªã c√¥ng khai cho kh√°ch h√†ng'
                                                    : '‚ùå D·ªãch v·ª• s·∫Ω b·ªã ·∫©n kh·ªèi danh s√°ch c√¥ng khai';
                                            })
                                            ->extraAttributes(['class' => 'text-sm']),
                                    ])
                                    ->columnSpan(1),

                                Fieldset::make('Th√¥ng Tin H·ªá Th·ªëng')
                                    ->schema([
                                        Forms\Components\Placeholder::make('system_info')
                                            ->label('Ghi Ch√∫')
                                            ->content('
‚Ä¢ Th√¥ng tin ng∆∞·ªùi t·∫°o v√† c·∫≠p nh·∫≠t s·∫Ω ƒë∆∞·ª£c l∆∞u t·ª± ƒë·ªông
‚Ä¢ D·ªãch v·ª• c√≥ th·ªÉ ƒë∆∞·ª£c kh√¥i ph·ª•c sau khi x√≥a
‚Ä¢ S·ª≠ d·ª•ng t√≠nh nƒÉng t√¨m ki·∫øm ƒë·ªÉ qu·∫£n l√Ω d·ªÖ d√†ng
                                            ')
                                            ->extraAttributes(['class' => 'text-sm text-gray-600']),
                                    ])
                                    ->columnSpan(1),
                            ]),
                    ]),
            ])
            ->columns(1);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                TextColumn::make('name')
                    ->label('T√™n D·ªãch V·ª•')
                    ->description(fn ($record): string => Str::limit($record->short_description, 50))
                    ->searchable(['name', 'short_description'])
                    ->sortable()
                    ->weight('semibold')
                    ->color('primary')
                    ->wrap()
                    ->copyable()
                    ->copyMessage('ƒê√£ sao ch√©p t√™n d·ªãch v·ª•')
                    ->tooltip('Click ƒë·ªÉ sao ch√©p'),

                TextColumn::make('short_description')
                    ->label('M√¥ T·∫£ Ng·∫Øn')
                    ->limit(80)
                    ->tooltip(fn ($record): string => $record->short_description ?? 'Ch∆∞a c√≥ m√¥ t·∫£')
                    ->default('Ch∆∞a c√≥ m√¥ t·∫£')
                    ->color('gray')
                    ->wrap(),

                IconColumn::make('is_active')
                    ->label('Tr·∫°ng Th√°i')
                    ->boolean()
                    ->trueIcon('heroicon-o-check-badge')
                    ->falseIcon('heroicon-o-x-circle')
                    ->trueColor('success')
                    ->falseColor('danger')
                    ->tooltip(fn ($record): string => $record->is_active ? 'ƒêang ho·∫°t ƒë·ªông' : 'T·∫°m d·ª´ng')
                    ->alignCenter(),

                BadgeColumn::make('creator.name')
                    ->label('Ng∆∞·ªùi T·∫°o')
                    ->sortable()
                    ->default('H·ªá th·ªëng')
                    ->color('info')
                    ->icon('heroicon-o-user-plus')
                    ->tooltip('Ng∆∞·ªùi t·∫°o d·ªãch v·ª•')
                    ->toggleable(isToggledHiddenByDefault: true),

                BadgeColumn::make('lastUpdater.name')
                    ->label('Ng∆∞·ªùi C·∫≠p Nh·∫≠t ')
                    ->sortable()
                    ->default('Ch∆∞a c·∫≠p nh·∫≠t')
                    ->color('warning')
                    ->icon('heroicon-o-pencil-square')
                    ->tooltip('Ng∆∞·ªùi c·∫≠p nh·∫≠t g·∫ßn nh·∫•t')
                    ->toggleable(isToggledHiddenByDefault: true),

                TextColumn::make('created_at')
                    ->label('Ng√†y T·∫°o')
                    ->dateTime('d/m/Y H:i')
                    ->sortable()
                    ->color('gray')
                    ->icon('heroicon-o-calendar-days')
                    ->tooltip('Th·ªùi gian t·∫°o d·ªãch v·ª•')
                    ->toggleable(isToggledHiddenByDefault: true),

                TextColumn::make('updated_at')
                    ->label('C·∫≠p Nh·∫≠t Cu·ªëi')
                    ->dateTime('d/m/Y H:i')
                    ->sortable()
                    ->color('gray')
                    ->icon('heroicon-o-clock')
                    ->tooltip('L·∫ßn c·∫≠p nh·∫≠t cu·ªëi c√πng')
                    ->since()
                    ->toggleable(),

                TextColumn::make('deleted_at')
                    ->label('Ng√†y X√≥a')
                    ->dateTime('d/m/Y H:i')
                    ->sortable()
                    ->color('danger')
                    ->icon('heroicon-o-trash')
                    ->tooltip('Th·ªùi gian x√≥a d·ªãch v·ª•')
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->filters([
                TrashedFilter::make()
                    ->label('Tr·∫°ng Th√°i X√≥a')
                    ->placeholder('T·∫•t c·∫£ d·ªãch v·ª•')
                    ->trueLabel('ƒê√£ x√≥a')
                    ->falseLabel('ƒêang ho·∫°t ƒë·ªông')
                    ->native(false),

                TernaryFilter::make('is_active')
                    ->label('Tr·∫°ng Th√°i K√≠ch Ho·∫°t')
                    ->placeholder('T·∫•t c·∫£ tr·∫°ng th√°i')
                    ->trueLabel('ƒêang k√≠ch ho·∫°t')
                    ->falseLabel('T·∫°m d·ª´ng')
                    ->native(false),

                SelectFilter::make('created_by')
                    ->label('Ng∆∞·ªùi T·∫°o')
                    ->relationship('creator', 'name')
                    ->placeholder('T·∫•t c·∫£ ng∆∞·ªùi t·∫°o')
                    ->native(false)
                    ->multiple()
                    ->preload(),

                Filter::make('created_at')
                    ->label('Ng√†y T·∫°o')
                    ->form([
                        Forms\Components\DatePicker::make('created_from')
                            ->label('T·ª´ ng√†y')
                            ->placeholder('Ch·ªçn ng√†y b·∫Øt ƒë·∫ßu'),
                        Forms\Components\DatePicker::make('created_until')
                            ->label('ƒê·∫øn ng√†y')
                            ->placeholder('Ch·ªçn ng√†y k·∫øt th√∫c'),
                    ])
                    ->query(function (Builder $query, array $data): Builder {
                        return $query
                            ->when(
                                $data['created_from'],
                                fn (Builder $query, $date): Builder => $query->whereDate('created_at', '>=', $date),
                            )
                            ->when(
                                $data['created_until'],
                                fn (Builder $query, $date): Builder => $query->whereDate('created_at', '<=', $date),
                            );
                    })
                    ->indicateUsing(function (array $data): array {
                        $indicators = [];
                        if ($data['created_from'] ?? null) {
                            $indicators['created_from'] = 'T·∫°o t·ª´: ' . \Carbon\Carbon::parse($data['created_from'])->format('d/m/Y');
                        }
                        if ($data['created_until'] ?? null) {
                            $indicators['created_until'] = 'T·∫°o ƒë·∫øn: ' . \Carbon\Carbon::parse($data['created_until'])->format('d/m/Y');
                        }
                        return $indicators;
                    }),
            ])
            ->actions([
                Tables\Actions\ActionGroup::make([
                    Tables\Actions\ViewAction::make()
                        ->label('Xem Chi Ti·∫øt')
                        ->icon('heroicon-o-eye')
                        ->color('info')
                        ->modalHeading('Chi Ti·∫øt D·ªãch V·ª•')
                        ->slideOver()
                        ->modalWidth('7xl'),

                    Tables\Actions\EditAction::make()
                        ->label('Ch·ªânh S·ª≠a')
                        ->icon('heroicon-o-pencil-square')
                        ->color('warning')
                        ->modalHeading('Ch·ªânh S·ª≠a D·ªãch V·ª•')

                        ->modalWidth('7xl'),

                    Tables\Actions\Action::make('toggle_status')
                        ->label(fn ($record) => $record->is_active ? 'T·∫°m D·ª´ng' : 'K√≠ch Ho·∫°t')
                        ->icon(fn ($record) => $record->is_active ? 'heroicon-o-pause' : 'heroicon-o-play')
                        ->color(fn ($record) => $record->is_active ? 'warning' : 'success')
                        ->action(function ($record) {
                            $record->update(['is_active' => !$record->is_active]);
                        })
                        ->requiresConfirmation()
                        ->modalHeading(fn ($record) => $record->is_active ? 'T·∫°m d·ª´ng d·ªãch v·ª•?' : 'K√≠ch ho·∫°t d·ªãch v·ª•?')
                        ->modalDescription(fn ($record) => $record->is_active
                            ? 'D·ªãch v·ª• s·∫Ω b·ªã ·∫©n kh·ªèi danh s√°ch c√¥ng khai.'
                            : 'D·ªãch v·ª• s·∫Ω hi·ªÉn th·ªã c√¥ng khai cho kh√°ch h√†ng.'),

                    Tables\Actions\DeleteAction::make()
                        ->label('X√≥a')
                        ->icon('heroicon-o-trash')
                        ->color('danger')
                        ->modalHeading('X√≥a D·ªãch V·ª•')
                        ->modalDescription('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a d·ªãch v·ª• n√†y? D·ªãch v·ª• c√≥ th·ªÉ ƒë∆∞·ª£c kh√¥i ph·ª•c sau khi x√≥a.'),

                    Tables\Actions\RestoreAction::make()
                        ->label('Kh√¥i Ph·ª•c')
                        ->icon('heroicon-o-arrow-uturn-left')
                        ->color('success')
                        ->modalHeading('Kh√¥i Ph·ª•c D·ªãch V·ª•')
                        ->modalDescription('D·ªãch v·ª• s·∫Ω ƒë∆∞·ª£c kh√¥i ph·ª•c v√† hi·ªÉn th·ªã tr·ªü l·∫°i trong danh s√°ch.'),

                    Tables\Actions\ForceDeleteAction::make()
                        ->label('X√≥a Vƒ©nh Vi·ªÖn')
                        ->icon('heroicon-o-trash')
                        ->color('danger')
                        ->modalHeading('X√≥a Vƒ©nh Vi·ªÖn')
                        ->modalDescription('‚ö†Ô∏è C·∫¢NH B√ÅO: H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c! D·ªãch v·ª• s·∫Ω b·ªã x√≥a ho√†n to√†n kh·ªèi h·ªá th·ªëng.'),
                ])
                    ->button()
                    ->label('Thao T√°c')
                    ->color('primary')
                    ->size('sm'),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\BulkAction::make('activate')
                        ->label('K√≠ch Ho·∫°t H√†ng Lo·∫°t')
                        ->icon('heroicon-o-check-circle')
                        ->color('success')
                        ->action(function ($records) {
                            $records->each->update(['is_active' => true]);
                        })
                        ->requiresConfirmation()
                        ->modalHeading('K√≠ch ho·∫°t c√°c d·ªãch v·ª• ƒë√£ ch·ªçn?')
                        ->modalDescription('T·∫•t c·∫£ d·ªãch v·ª• ƒë∆∞·ª£c ch·ªçn s·∫Ω ƒë∆∞·ª£c k√≠ch ho·∫°t v√† hi·ªÉn th·ªã c√¥ng khai.'),

                    Tables\Actions\BulkAction::make('deactivate')
                        ->label('T·∫°m D·ª´ng H√†ng Lo·∫°t')
                        ->icon('heroicon-o-pause-circle')
                        ->color('warning')
                        ->action(function ($records) {
                            $records->each->update(['is_active' => false]);
                        })
                        ->requiresConfirmation()
                        ->modalHeading('T·∫°m d·ª´ng c√°c d·ªãch v·ª• ƒë√£ ch·ªçn?')
                        ->modalDescription('T·∫•t c·∫£ d·ªãch v·ª• ƒë∆∞·ª£c ch·ªçn s·∫Ω b·ªã ·∫©n kh·ªèi danh s√°ch c√¥ng khai.'),

                    Tables\Actions\DeleteBulkAction::make()
                        ->label('X√≥a H√†ng Lo·∫°t')
                        ->icon('heroicon-o-trash')
                        ->color('danger')
                        ->modalHeading('X√≥a c√°c d·ªãch v·ª• ƒë√£ ch·ªçn?')
                        ->modalDescription('C√°c d·ªãch v·ª• s·∫Ω ƒë∆∞·ª£c chuy·ªÉn v√†o th√πng r√°c v√† c√≥ th·ªÉ kh√¥i ph·ª•c sau.'),

                    Tables\Actions\RestoreBulkAction::make()
                        ->label('Kh√¥i Ph·ª•c H√†ng Lo·∫°t')
                        ->icon('heroicon-o-arrow-uturn-left')
                        ->color('success')
                        ->modalHeading('Kh√¥i ph·ª•c c√°c d·ªãch v·ª• ƒë√£ ch·ªçn?')
                        ->modalDescription('T·∫•t c·∫£ d·ªãch v·ª• ƒë∆∞·ª£c ch·ªçn s·∫Ω ƒë∆∞·ª£c kh√¥i ph·ª•c v√† hi·ªÉn th·ªã tr·ªü l·∫°i.'),

                    Tables\Actions\ForceDeleteBulkAction::make()
                        ->label('X√≥a Vƒ©nh Vi·ªÖn H√†ng Lo·∫°t')
                        ->icon('heroicon-o-trash')
                        ->color('danger')
                        ->modalHeading('‚ö†Ô∏è X√≥a vƒ©nh vi·ªÖn c√°c d·ªãch v·ª• ƒë√£ ch·ªçn?')
                        ->modalDescription('C·∫¢NH B√ÅO: H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c! T·∫•t c·∫£ d·ªãch v·ª• s·∫Ω b·ªã x√≥a ho√†n to√†n.'),
                ]),
            ])
            ->emptyStateActions([
                Tables\Actions\CreateAction::make()
                    ->label('T·∫°o D·ªãch V·ª• ƒê·∫ßu Ti√™n')
                    ->icon('heroicon-o-plus')
                    ->color('primary'),
            ])
            ->emptyStateHeading('Ch∆∞a C√≥ D·ªãch V·ª• N√†o')
            ->emptyStateDescription('H√£y b·∫Øt ƒë·∫ßu b·∫±ng c√°ch t·∫°o d·ªãch v·ª• cho thu√™ ƒë·∫ßu ti√™n c·ªßa b·∫°n.')
            ->emptyStateIcon('heroicon-o-building-office-2')
            ->defaultSort('created_at', 'desc')
            ->striped()
            ->persistSortInSession()
            ->persistSearchInSession()
            ->persistFiltersInSession()
            ->deferLoading()
            ->poll('30s')
            ->paginationPageOptions([10, 25, 50, 100])
            ->recordUrl(null)
            ->recordAction(null);
    }

    public static function getEloquentQuery(): Builder
    {
        return parent::getEloquentQuery()
            ->withoutGlobalScopes([
                SoftDeletingScope::class,
            ]);
    }

    public static function getNavigationBadge(): ?string
    {
        return static::getModel()::count();
    }

    public static function getNavigationBadgeColor(): string|array|null
    {
        return static::getModel()::count() > 10 ? 'success' : 'primary';
    }

    public static function getRelations(): array
    {
        return [
            // C√≥ th·ªÉ th√™m RelationManagers n·∫øu c·∫ßn
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListRentalServices::route('/'),
            'create' => Pages\CreateRentalService::route('/create'),
            'edit' => Pages\EditRentalService::route('/{record}/edit'),
        ];
    }

    public static function getGlobalSearchEloquentQuery(): Builder
    {
        return parent::getGlobalSearchEloquentQuery()
            ->with(['creator', 'lastUpdater']);
    }

    public static function getGloballySearchableAttributes(): array
    {
        return ['name', 'short_description'];
    }

    public static function getGlobalSearchResultDetails(Model $record): array
    {
        return [
            'Tr·∫°ng th√°i' => $record->is_active ? 'ƒêang ho·∫°t ƒë·ªông' : 'T·∫°m d·ª´ng',
            'Ng∆∞·ªùi t·∫°o' => $record->creator?->name ?? 'H·ªá th·ªëng',
            'Ng√†y t·∫°o' => $record->created_at->format('d/m/Y'),
        ];
    }
}